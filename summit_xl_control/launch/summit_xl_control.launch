<?xml version="1.0"?>
<launch>
  <arg name="id_robot" default="$(optenv ROBOT_ID robot)"/>
  <arg name="prefix" default="$(arg id_robot)_"/>

  <!-- kinematics: skid, omni -->
  <arg name="kinematics" default="$(optenv ROBOT_KINEMATICS skid)"/>
  <arg name="wheel_diameter" default="$(optenv ROBOT_WHEEL_DIAMETER 0.22)"/>
  <arg name="track_width" default="$(optenv ROBOT_TRACK_WIDTH 0.439)"/>
  <arg name="wheel_base" default="$(optenv ROBOT_WHEEL_BASE 0.430)"/>
  <arg name="odom_frame" default="$(arg prefix)odom"/>
  <arg name="base_frame" default="$(arg prefix)base_footprint"/>
  <arg name="ros_planar_move_plugin" default="false"/>
  <arg name="sim" default="false"/>
  <arg name="sim_arm_control" default="false"/>
  <arg name="cmd_vel" default="robotnik_base_control/cmd_vel"/>
  <arg name="launch_pantilt_camera_controller" default="false"/>
  <arg name="odom_broadcast_tf" default="true"/>
  <!-- arm -->
  <arg name="arm_manufacturer" default="trossen"/>
  <arg name="arm_model" default="vx300"/>
  <arg name="arm_prefix" default="$(arg prefix)$(arg arm_model)"/>

  <!-- Robot - Load joint controller configurations from YAML file to parameter server -->
  <group unless="$(arg sim)">
	  <rosparam file="$(find summit_xl_control)/config/robot_control.yaml" command="load" subst_value="true"/>

	  <!-- load the controllers -->
	  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="
		  robotnik_base_control
		  joint_read_state_controller
		  ">
	  </node>

  </group>
    <!-- Simulation - Load joint controller configurations from YAML file to parameter server -->
  <group if="$(arg sim)">
	  <rosparam file="$(find summit_xl_control)/config/simulation/robot_control.yaml" command="load" subst_value="true"/>

    <group if="$(arg sim_arm_control)">
      <include file="$(find summit_xl_control)/launch/$(arg arm_manufacturer)_control.launch">
        <arg name="prefix" value="$(arg prefix)"/>
        <arg name="arm_prefix" value="$(arg arm_prefix)"/>
        <arg name="arm_model" value="$(arg arm_model)"/>
        <arg name="use_trajectory_controller" value="true"/>
      </include>
    </group>

    <!-- if it has camera ptz -->
    <group if="$(arg launch_pantilt_camera_controller)">
      <node if="$(arg ros_planar_move_plugin)" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="
        joint_read_state_controller
        joint_pan_position_controller
        joint_tilt_position_controller
       ">
      </node>

      <!-- load the robotnik_base_control ros controllers -->
      <node unless="$(arg ros_planar_move_plugin)" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="
        robotnik_base_control
        joint_read_state_controller
        joint_pan_position_controller
        joint_tilt_position_controller
       ">
      </node>
    </group>
    <!-- if does not have camera ptz -->
    <group unless="$(arg launch_pantilt_camera_controller)">
      <node if="$(arg ros_planar_move_plugin)" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="
        joint_read_state_controller
       ">
      </node>

      <!-- load the robotnik_base_control ros controllers -->
      <node unless="$(arg ros_planar_move_plugin)" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="
        robotnik_base_control
        joint_read_state_controller
       ">
      </node>
    </group>


  </group>


  <node pkg="twist_mux" type="twist_mux" name="twist_mux">
    <rosparam command="load" file="$(find summit_xl_control)/config/twist_mux.yaml" />
    <remap from="cmd_vel_out" to="$(arg cmd_vel)" />
  </node>
  <node pkg="twist_mux" type="twist_marker" name="twist_marker">
    <remap from="twist"  to="$(arg cmd_vel)"/>
    <remap from="marker" to="twist_marker"/>
  </node>


</launch>
